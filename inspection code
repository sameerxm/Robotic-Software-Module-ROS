#!/usr/bin/env python3
 
import rclpy
from rclpy.node import Node
from geometry_msgs.msg import Twist
from nav_msgs.msg import Odometry
from sensor_msgs.msg import LaserScan
import math
import tf_transformations
import time
 
# Constants for robot and environment parameters
MAX_LIN_VEL = 0.2  # Max linear velocity (forward and backward)
MAX_ANG_VEL = 0.5  # Max angular velocity (turning)
OBSTACLE_THRESHOLD = 0.8  # Distance threshold for obstacles (in meters)
TOLERANCE = 0.1  # Tolerance for destination reached (in meters)
 
# Time constants for stuck detection
STUCK_TIME_THRESHOLD = 3.0  # Time threshold in seconds to detect if the robot is stuck
STUCK_DISTANCE_THRESHOLD = 0.2  # Minimum distance the robot needs to travel to consider not stuck
 
class RosbotObstacleNavigation(Node):
    def __init__(self):
        super().__init__('rosbot_obstacle_navigation')
 
        # Publisher for robot velocity
        self.cmd_vel_pub = self.create_publisher(Twist, '/cmd_vel', 10)
        
        # Subscriber to Odometry
        self.odom_sub = self.create_subscription(Odometry, '/rosbot_base_controller/odom', self.odom_callback, 10)
 
        # Subscriber to Lidar data
        self.lidar_sub = self.create_subscription(LaserScan, '/scan', self.lidar_callback, 10)
 
        # List of destination coordinates (waypoints)
        self.destinations = [
            (9.71504, -2.145),  # Destination 1
            (9.19347, -3.061),  # Destination 2
            (9.19347, -3.061),  # Destination 3
            (9.19347, -3.061),  # Destination 4
            (9.19347, -3.061),  # Destination 5
            (9.19347, -3.061)   # Destination 6
        ]
        
        # Initialize current position and variables
        self.current_x = 0.0
        self.current_y = 0.0
        self.current_yaw = 0.0
        self.last_x = 0.0
        self.last_y = 0.0
        self.last_time = time.time()
 
        # Lidar data
        self.lidar_ranges = []
 
        # Move the robot towards the destinations in sequence
        self.move_robot()
 
    def odom_callback(self, msg):
        # Extract the current position and orientation from the Odometry message
        self.current_x = msg.pose.pose.position.x
        self.current_y = msg.pose.pose.position.y
        
        # Extract the yaw (rotation) angle from the quaternion orientation
        orientation_q = msg.pose.pose.orientation
        orientation_list = [orientation_q.x, orientation_q.y, orientation_q.z, orientation_q.w]
        (roll, pitch, self.current_yaw) = tf_transformations.euler_from_quaternion(orientation_list)
 
    def lidar_callback(self, msg):
        # Get the Lidar ranges
        self.lidar_ranges = msg.ranges
 
    def move_robot(self):
        msg = Twist()
 
        # Main loop for moving the robot
        for target_x, target_y in self.destinations:
            # Wait until Lidar data is available
            while not self.lidar_ranges:
                self.get_logger().warn("Lidar data not available yet!")
                rclpy.spin_once(self)
                continue
 
            # Compute the distance to the target coordinates
            distance = math.sqrt((target_x - self.current_x) ** 2 + (target_y - self.current_y) ** 2)
 
            # Move towards the target until the robot is within the tolerance distance
            while distance > TOLERANCE:
                # Time-based stuck detection
                current_time = time.time()
                time_elapsed = current_time - self.last_time
 
                # Calculate the progress towards the target
                progress = math.sqrt((self.current_x - target_x) ** 2 + (self.current_y - target_y) ** 2)
 
                # If no significant progress is made, robot might be stuck
                if time_elapsed > STUCK_TIME_THRESHOLD:
                    if abs(self.current_x - self.last_x) < STUCK_DISTANCE_THRESHOLD and abs(self.current_y - self.last_y) < STUCK_DISTANCE_THRESHOLD:
                        msg.linear.x = -MAX_LIN_VEL  # Move backward
                        msg.angular.z = MAX_ANG_VEL  # Rotate
                        self.get_logger().info("Robot appears to be stuck! Taking corrective action.")
                    else:
                        self.last_x = self.current_x
                        self.last_y = self.current_y
 
                # Evaluate the free space in all directions
                left_space = min(self.lidar_ranges[45:90])  # Space to the left (45° to 90°)
                right_space = min(self.lidar_ranges[270:315])  # Space to the right (270° to 315°)
                forward_space = min(self.lidar_ranges[0:15])  # Space ahead (0° to 15°)
                backward_space = min(self.lidar_ranges[180:195])  # Space behind (180° to 195°)
 
                # Log distances for debugging
                self.get_logger().info(f"Left space: {left_space} meters")
                self.get_logger().info(f"Right space: {right_space} meters")
                self.get_logger().info(f"Forward space: {forward_space} meters")
                self.get_logger().info(f"Backward space: {backward_space} meters")
 
                # Decision logic to choose the best movement direction
                if forward_space > OBSTACLE_THRESHOLD:
                    # Move forward if there's enough space ahead
                    msg.linear.x = MAX_LIN_VEL
                    msg.angular.z = 0.0
                    self.get_logger().info("Moving forward")
                elif left_space > right_space and left_space > OBSTACLE_THRESHOLD:
                    # Turn left if the left space is greater than the right
                    msg.linear.x = 0.0
                    msg.angular.z = MAX_ANG_VEL
                    self.get_logger().info("Turning left")
                elif right_space > left_space and right_space > OBSTACLE_THRESHOLD:
                    # Turn right if the right space is greater than the left
                    msg.linear.x = 0.0
                    msg.angular.z = -MAX_ANG_VEL
                    self.get_logger().info("Turning right")
                else:
                    # If no clear space, back up
                    msg.linear.x = -MAX_LIN_VEL
                    msg.angular.z = 0.0
                    self.get_logger().info("Backing up")
 
                # Publish the command to move the robot
                self.cmd_vel_pub.publish(msg)
 
                # Recalculate distance to the target
                distance = math.sqrt((target_x - self.current_x) ** 2 + (target_y - self.current_y) ** 2)
 
                # Wait a moment to let the robot move
                rclpy.spin_once(self)
 
            # Once the destination is reached, stop the robot and move to the next destination
            msg.linear.x = 0.0
            msg.angular.z = 0.0
            self.cmd_vel_pub.publish(msg)
            self.get_logger().info(f"Reached destination ({target_x}, {target_y}), moving to next waypoint.")
 
def main(args=None):
    rclpy.init(args=args)
    rosbot_navigation = RosbotObstacleNavigation()
    rclpy.spin(rosbot_navigation)
    rosbot_navigation.destroy_node()
    rclpy.shutdown()
 
if __name__ == '__main__':
    main()
 
 
